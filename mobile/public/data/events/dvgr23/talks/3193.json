{
  "speakers": [
    {
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-beba5a8e-0893-4c9b-bb40-78223c1e5ccc.jpg",
      "fullName": "Martin Thwaites",
      "id": "3607",
      "companyName": "Honeycomb.io"
    }
  ],
  "id": "3193",
  "room": {
    "id": "2801",
    "title": "Banquet"
  },
  "format": {
    "id": "953",
    "title": "Conference",
    "duration": "PT40m"
  },
  "summary": "",
  "description": "<p><span style=\"color: rgb(103, 106, 108);\">Building operable software is becoming more important with the adoption of Microservice based systems becoming more common. Developers are increasingly relying on building long-running \"integration\" tests in deployed environments because it's the only way to gain confidence to deploy their applications. There is a better way, which is to focus on \"outside-in\" testing that focuses on testing the boundaries of your service.</span></p><p><br></p><p><span style=\"color: rgb(103, 106, 108);\">In this talk, we'll go through some of the pitfalls of relying on unit testing to give you confidence in an application. We'll then go through how you can use TDD as a workflow to build tests in a \"Contract First\" way and how much more flexible your testing becomes. We'll talk about the benefits over Unit testing focus, and how it can aid in understanding service boundaries. Finally, we'll show you can correlate all this up with Tracing tools like Honeycomb to see the performance of your tests and how internal code interacts.</span></p><p><br></p><p><span style=\"color: rgb(103, 106, 108);\">This talk will be focusing on the WebApplicationFactory in .NET to provide the scaffold, and Honeycomb to provide the visibility, however, the concepts will likely apply to other languages.</span></p>",
  "language": "EN",
  "title": "Building Operable Software with TDD (but not the way you think)",
  "track": {
    "title": "Development Practices",
    "id": "1701"
  }
}