{
  "summary": "In this talk, we will discuss how deserialization vulnerabilities work in Java and how to avoid them.",
  "title": "Deserialization exploits in Java: why should I care?",
  "track": {
    "id": "1255",
    "title": "Security"
  },
  "language": "EN",
  "room": {
    "id": "4709",
    "title": "Room 9"
  },
  "format": {
    "duration": "PT50m",
    "title": "Conference",
    "id": "951"
  },
  "speakers": [
    {
      "companyName": "Snyk",
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-663b8d4f-0084-4194-8013-7e5b1ff078a1.png",
      "fullName": "Brian Vermeer",
      "id": "11603"
    }
  ],
  "description": "<p><span style=\"color: rgb(0, 0, 0);\">Hackers refer to deserialization in Java as “the gift that keeps on giving”. But what is actually the problem? In most cases, it is not even your own code that creates this security vulnerability. This problem is also not restricted to Java’s custom serialization framework. When deserializing JSON, XML, or YAML, similar issues can occur as well. In this talk, I explain how deserialization vulnerabilities work natively in Java and how attack chains are created. Next, I will show that deserializing XML, JSON, and YAML can also get you into trouble. And of course, we had the recent Log4j problems with deserialization. Many different problems can occur when deserializing data and in this session, I will use several demos to illustrate various security issues. How do you avoid these issues? I will give you some pointers on how to mitigate these problems in your own applications, this also includes new features in Java 17. At the end of this session, you will have an understanding of the problem space and be able to take action in your code to prevent it.</span></p>",
  "id": "11655"
}