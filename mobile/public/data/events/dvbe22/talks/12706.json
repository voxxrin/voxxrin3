{
  "speakers": [
    {
      "companyName": "BellSoft",
      "id": "12655",
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-0bd963d8-7ec6-48e4-acc2-250b37d810cd.png",
      "fullName": "Dmitry Chuyko"
    }
  ],
  "track": {
    "id": "1254",
    "title": "Build & Deploy"
  },
  "summary": " Alpine Linux is being integrated into OpenJDK, and it offers significant benefits for container optimization.",
  "room": {
    "id": "4708",
    "title": "Room 6"
  },
  "language": "EN",
  "id": "12706",
  "description": "<p>Have you recently moved to microservices? Your team is deploying the code much faster, but data transfer costs are going up as well, aren’t they? That’s because the size of containers matters the most, and keeping them lightweight means saving on bandwidth usage.</p><p>BellSoft’s engineers have come up with a solution, which is full-fledged Alpine Linux support in OpenJDK. By that, we’ve also invented a real-life TARDIS: Containers that take only a few MB of storage but carry enormous potential. With the release of JDK 16, the Portola Project has been integrated into the OpenJDK mainline as part of our JEP 386. Duct-taping with a glibc layer will become a thing of the past, as all the processes will connect flawlessly. Your company will get to use tiny container images independently of the distribution kit vendor. They have been available for a long time, but the official HotSpot port status for the musl library will expand the scope and simplify related development.</p><p>My talk is going to touch upon the benefits that Alpine Linux is bringing to the OpenJDK community. It will also explain how to optimize Docker images for free by changing just one or two lines of code. Lastly, I’ll offer a tool for choosing an optimal container that will suit your project perfectly.</p>",
  "format": {
    "id": "951",
    "duration": "PT50m",
    "title": "Conference"
  },
  "title": "Docker Who: Small Containers Through Time and Space"
}