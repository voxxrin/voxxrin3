{
  "id": "20726",
  "title": "Fuzzing in Go",
  "track": {
    "id": "1255",
    "title": "Security"
  },
  "speakers": [
    {
      "fullName": "Valentin Deleplace",
      "companyName": "Google",
      "id": "20584",
      "photoUrl": "https://avatars.githubusercontent.com/u/13508141?v=4"
    }
  ],
  "language": "EN",
  "room": {
    "id": "4708",
    "title": "Room 6"
  },
  "summary": "",
  "format": {
    "id": "957",
    "title": "Tools-in-Action",
    "duration": "PT30m"
  },
  "description": "<p>The recent release of Go 1.18 brought not only the long-awaited generics, but also a new Fuzzing capability built in the standard toolchain.</p><p>But what is Fuzzing?</p><p>Let's explore what Fuzzing is about, see how it's integrated in the testing framework to automate randomized testing, and write a live demo from scratch.</p><p>Fuzzing is not consistently used in the software industry yet, however Fuzzing has the potential to detect critical security flaws. More than ever, who can afford to neglect defence in depth, when exposing any service at all on the internet?</p>"
}