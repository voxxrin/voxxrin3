{
  "id": "20425",
  "description": "<p>One benefit of pause-less garbage collectors such as Shenandoah and ZGC is that they can bound pause times to a few ms independent of heap sizes. An operational tradeoff is that the JVM must be configured with a much larger heap in order to assure pause-less operation, sometimes 3-5 times larger than would be required by a stop-the-world garbage collector. This is because extra memory is required to hold objects allocated during the times that garbage collection is concurrently running and to hold floating garbage that was allocated during the previous garbage collection pass but cannot be reclaimed until the end of the courrent garbage collection pass. Adding a second generation to Shenandoah allows typical young-generation garbage collection passes to complete in much less time than is required for traditional Shenandoah full garbage collection cycles. This means less memory is required for new allocations and floating garbage and fewer CPU resources are required by the concurrent GC worker therads. All of this translates into lower costs for capital and operations, lower energy consumption, and a greener planet.</p><p>This talk describes the motivation, design, and best-practice recommendations for making effective use of generational Shenandoah in your services that have timeliness constraints.</p>",
  "speakers": [
    {
      "id": "15752",
      "companyName": "Amazon",
      "fullName": "Kelvin Nilsen",
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-17b222e7-2431-4d17-b725-33dd4731f0d4.jpg"
    }
  ],
  "track": {
    "id": "2754",
    "title": "Java"
  },
  "title": "Generational Shenandoah: Better latency with smaller heaps",
  "language": "EN",
  "room": {
    "title": "Room 10",
    "id": "4704"
  },
  "format": {
    "title": "Conference",
    "id": "951",
    "duration": "PT50m"
  },
  "summary": "Generational garbage collection (GCC) can improve the timeliness of your services by allowing concurrent garbage collection to complete in less time than is required for traditional Shenandoah full garbage collection cycles. This means less memory is required for new allocations and floating garbage and fewer CPU resources are required by the concurrent GC worker threads."
}