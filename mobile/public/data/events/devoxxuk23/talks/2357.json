{
  "speakers": [
    {
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-2d46e811-5fc7-43d9-b855-6e448badf51b.jpg",
      "companyName": "Edument AB",
      "id": "2451",
      "fullName": "Marc Klefter"
    }
  ],
  "description": "<p><span style=\"color: rgb(103, 106, 108);\">Building a distributed system of microservices using a </span><em style=\"color: rgb(103, 106, 108);\">synchronous</em><span style=\"color: rgb(103, 106, 108);\"> (request/response) communication style is a common approach with a lot of supporting patterns and technologies (terms such as \"circuit breaker\", \"service discovery\" and \"service mesh\" are probably familiar to many developers). But as we move to cloud native environments, we must design systems that operate in constantly-changing conditions where failures can occur at any time.</span></p><p><br></p><p><span style=\"color: rgb(103, 106, 108);\">By switching to an </span><em style=\"color: rgb(103, 106, 108);\">asynchronous</em><span style=\"color: rgb(103, 106, 108);\"> paradigm, we're able to maximize the availability of our applications via loosely-coupled microservices that interact using </span><em style=\"color: rgb(103, 106, 108);\">messaging</em><span style=\"color: rgb(103, 106, 108);\">, with building blocks such as </span><em style=\"color: rgb(103, 106, 108);\">commands</em><span style=\"color: rgb(103, 106, 108);\">, </span><em style=\"color: rgb(103, 106, 108);\">events</em><span style=\"color: rgb(103, 106, 108);\"> and </span><em style=\"color: rgb(103, 106, 108);\">queries</em><span style=\"color: rgb(103, 106, 108);\">. In this session, Marc Klefter will outline the concrete steps required to migrate a microservices based Java/Spring application from a synchronous to an asynchronous mode of communication, and evaluate the benefits that follow.</span></p><p><br></p><p><span style=\"color: rgb(103, 106, 108);\">What concepts are essential to implementing message-driven architectures, and how do they differ from their synchronous counterparts? What are the tools and infrastructure (e.g. message routers, event stores) needed to realize these solutions, and essential aspects such as security, observability, routing and resiliency? Join this session to learn the answers to these and many more questions, and get started on your journey towards asynchronous microservices!</span></p>",
  "language": "EN",
  "format": {
    "id": "951",
    "duration": "PT50m",
    "title": "Conference"
  },
  "room": {
    "title": "Gallery Hall",
    "id": "19151"
  },
  "title": "Become message-driven! The journey towards asynchronous microservices.",
  "summary": "",
  "id": "2357",
  "track": {
    "id": "1251",
    "title": "Architecture"
  }
}