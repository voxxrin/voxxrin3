{
  "speakers": [
    {
      "companyName": "Red Hat",
      "photoUrl": "https://devoxxian-image-thumbnails.s3-eu-west-1.amazonaws.com/profile-8f1c784f-ae12-4853-9c0c-8fe46d48228e.jpeg",
      "fullName": "Alex Soto",
      "id": "6768"
    }
  ],
  "track": {
    "id": "15801",
    "title": "DevNation Day"
  },
  "language": "EN",
  "room": {
    "title": "Room B",
    "id": "19154"
  },
  "summary": "",
  "id": "7017",
  "format": {
    "id": "951",
    "duration": "PT50m",
    "title": "Conference"
  },
  "description": "<p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Deploying an Apache Kafka cluster to Kubernetes is not an easy task. There are a lot of aspects to consider and components to configure, like ZooKeeper, the Kafka brokers themselves, topics, and users (ACLs/RBAC).</span></p><p><br></p><p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">One option is doing everything by hand, writing all the YAML files manually, ad-hoc, according to your requirements. However, difficulties will arise from day two after the initial setup. For instance, how to manage the Kafka cluster, the creation and configuration of users and topics, security aspects, the replication of content to different clusters, or what about maintaining different environments?</span></p><p><br></p><p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">The Strimzi project simplifies the management of Apache Kafka clusters on Kubernetes in various deployment configurations while following GitOps methodologies.</span></p><p><br></p><p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">If you think running Kafka on Kubernetes is a natural choice, come to this session to learn how Strimzi and GitOps methodologies give you superpowers for managing Apache Kafka operations on a production Kubernetes cluster.</span></p>",
  "title": "Taming Apache Kafka on Kubernetes using GitOps"
}