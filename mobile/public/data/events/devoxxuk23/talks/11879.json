{
  "format": {
    "duration": "PT60m",
    "title": "Mini Lab",
    "id": "1351"
  },
  "title": "Making your own Testcontainers module for fun and profit!",
  "description": "<p>Testcontainers libraries are a de-facto standard for integration testing in the Java community. One of the reasons for its popularity is the ecosystem of the modules -- pre-defined abstractions for creating containerized services for your tests in a single line of code.&nbsp;</p><p>Testcontainers modules help to integrate with new technologies, hide setup complexity behind a neat abstraction, or use in-house Docker images without using lower-level API all the time.&nbsp;&nbsp;</p><p>In this lab, we'll go over the architecture of a module, see how one can implement it, and make a small but helpful module ourselves.&nbsp;</p><p>Whether you're working on a database technology, want to implement chaos engineering practices, or improve your team's productivity, creating a Testcontainers module is an excellent way to abstract away some of the complexity of your integration tests and contribute to the Java ecosystem.&nbsp;</p>",
  "track": {
    "title": "Dev Craft",
    "id": "1701"
  },
  "speakers": [
    {
      "id": "10784",
      "fullName": "Oleg Å elajev",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GirxluLvkptnsT5MxbBaxmupiXXUBlJRLyGooNrEZc=s96-c",
      "companyName": "AtomicJar"
    }
  ],
  "room": {
    "title": "Coding Cafe",
    "id": "19158"
  },
  "summary": "",
  "id": "11879",
  "language": "EN"
}